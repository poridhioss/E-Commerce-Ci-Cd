version: '3.8'

services:
  # New comment 2
  # API Gateway
  nginx-gateway:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"  # For HTTPS
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - product-service
      - order-service
      - inventory-service
      - user-service
      - notification-service
    networks:
      - microservice-network

  # Product Service and its database
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - INVENTORY_SERVICE_URL=http://inventory-service:8002/api/v1
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092  # FIXED: Use internal port
    env_file:
      - ./product-service/.env
    depends_on:
      mongodb-product:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - microservice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mongodb-product:
    image: mongo:5.0
    volumes:
      - mongodb_product_data:/data/db
    networks:
      - microservice-network
    environment:
      - MONGO_INITDB_DATABASE=product_db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Order Service and its database
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - USER_SERVICE_URL=http://user-service:8003/api/v1
      - PRODUCT_SERVICE_URL=http://product-service:8000/api/v1
      - INVENTORY_SERVICE_URL=http://inventory-service:8002/api/v1
    env_file:
      - ./order-service/.env
    depends_on:
      mongodb-order:
        condition: service_healthy
    networks:
      - microservice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mongodb-order:
    image: mongo:5.0
    volumes:
      - mongodb_order_data:/data/db
    networks:
      - microservice-network
    environment:
      - MONGO_INITDB_DATABASE=order_db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Inventory Service and its database
  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - PRODUCT_SERVICE_URL=http://product-service:8000/api/v1
      - DATABASE_URL=postgresql://postgres:postgres@postgres-inventory:5432/inventory_db
      - REDIS_URL=redis://redis:6379/0
      - NOTIFICATION_CHANNEL=inventory:low-stock
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092  # FIXED: Use internal port
      - KAFKA_CLIENT_ID=inventory-service     # ADDED: Explicit client ID
      - KAFKA_CONSUMER_GROUP=inventory-consumer-group  # ADDED: Explicit consumer group
    env_file:
      - ./inventory-service/.env
    depends_on:
      postgres-inventory:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - microservice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres-inventory:
    image: postgres:13
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=inventory_db
    volumes:
      - postgres_inventory_data:/var/lib/postgresql/data
    networks:
      - microservice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d inventory_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # User Service and its database
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-user:5432/user_db
    env_file:
      - ./user-service/.env
    depends_on:
      postgres-user:
        condition: service_healthy
    networks:
      - microservice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8003/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres-user:
    image: postgres:13
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=user_db
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    networks:
      - microservice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d user_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # New Notification Service and its database
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-notification:5432/notification_db
      - REDIS_URL=redis://redis:6379/0
      - NOTIFICATION_CHANNEL=inventory:low-stock
      - USER_SERVICE_URL=http://user-service:8003/api/v1
    env_file:
      - ./notification-service/.env
    depends_on:
      postgres-notification:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - microservice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8004/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres-notification:
    image: postgres:13
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=notification_db
    volumes:
      - postgres_notification_data:/var/lib/postgresql/data
    networks:
      - microservice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d notification_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - microservice-network

  # Redis for Notification Service
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: ["redis-server", "--appendonly", "yes"] # Enable persistence
    networks:
      - microservice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - microservice-network
    restart: unless-stopped

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - microservice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Kafka UI for monitoring (optional but helpful)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092  # This was already correct
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - microservice-network

networks:
  microservice-network:
    driver: bridge

volumes:
  mongodb_product_data:
  mongodb_order_data:
  postgres_inventory_data:
  postgres_user_data:
  postgres_notification_data:
  rabbitmq_data:
  redis_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data: